version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.  
    steps:
      - run:
          name: Install AWS CLI is not availavle
          when: on_fail
          command: |
            if ! [ -x "$(command -v aws)" ]; then
            pip install awscli
            else
            echo "installed AWS CLI"
            fi
      - run:
          name: destroy environment
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7}
      # - run:
      #     name: Destroy Promotion Stack
      #     when: on_fail
      #     command: |
      #       aws cloudformation delete-stack --stack-name udapeople-cloudfront_

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            success_migration=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if((${success_migration}==1)); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: build backend
          command: |
             # Your code here
             cd backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - run:
          name: Copy compiled backend for future use in ansible
          command: |
            mkdir /tmp/workspace
            cp ./backend/package.json /tmp/workspace/
            cd backend/dist
            tar -zcvf /tmp/workspace/backend.tar.gz ./
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - backend.tar.gz
            - package.json

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git_
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Back-end test
          command: |
            cd backend
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache_
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: backend test
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/backend.yml \
              --tags project=udapeople infra_type=backend \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/frontend.yml \
              --tags project=udapeople infra_type=frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: | 
            aws ec2 describe-instances \
             --query 'Reservations[*].Instances[*].PublicIpAddress' \
             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"\
             --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            cp .circleci/ansible/inventory.txt /tmp/workspace/
            cd /tmp/workspace
            ls -a 
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - inventory.txt
      - destroy-environment

  configure-infrastructure-and-deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "53:f2:da:9a:3b:e7:a0:a7:01:54:10:53:20:84:00:9d"
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: configure server and deploy backend
          command: |
            apk update
            apk add --update ansible tar gzip
            ansible-galaxy install weareinteractive.environment
            ls -a /tmp/workspace
            cat /tmp/workspace/inventory.txt
            echo "$(pwd)"
            ls -a
            echo "here 1"
            echo ENVIROMENT=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            echo "here 2"
            ls -a backend

            export ANSIBLE_HOST_KEY_CHECKING=False
            cat /tmp/workspace/inventory.txt
            ansible-playbook -i /tmp/workspace/inventory.txt .circleci/ansible/playbook.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["56:75:33:ca:45:b4:44:30:c9:2d:e5:5c:d0:3e:39:2b"]
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            # echo ENVIROMENT=production >> "backend/.env"
            # echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            # echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            # echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            # echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            # echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            # echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            # echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            # echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            # echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cd backend
            npm install
            npm audit fix
            npm run migrations > migrations.txt
            cat migrations.txt      
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if grep -q "has been executed successfully" migrations.txt
            then
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
                --request PUT \
                --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            else
              echo $(curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
                --request PUT \
                --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            fi
      - destroy-environment
     

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum -y install tar gzip nodejs
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="http://${BACKEND_IP}:3030" >> "frontend/.env"
            echo "${API_URL}"
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request PUT \
              --data "${BACKEND_IP}" https://api.memstash.io/values/backend_ip_${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm audit fix
            npm run build
            aws s3 sync dist s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --delete
      - revert-migrations
      - destroy-environment  

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
      - run:
          name: Backend smoke test
          command: |
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET "https://api.memstash.io/values/backend_ip_${CIRCLE_WORKFLOW_ID:0:7}")
            echo $BACKEND_IP
            curl "http://${BACKEND_IP}:3030/api/status"
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - revert-migrations
      - destroy-environment

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl 
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: update cloudfront distribution
          command: |
            OldWorkflowId=$(curl -H "token: gemlcj9dt2p49xv" --request GET "https://api.memstash.io/values/udapeople_active_workflowid_gemlcj9dt2p49xv")
            echo $BACKEND_IP
            
            echo OldWorkflowId: ${OldWorkflowId}

            aws cloudformation deploy \
                --template-file .circleci/cloudfront.yml \
                --tags project=udapeople \
                --stack-name udapeople-cloudfront \
                --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
            
            curl -H "Content-Type: text/plain" -H "token: gemlcj9dt2p49xv" --request PUT --data "${CIRCLE_WORKFLOW_ID}" https://api.memstash.io/values/udapeople_active_workflowid_gemlcj9dt2p49xv

            aws s3 rm s3://udapeople-${OldWorkflowId:0:7}/ --recursive
            aws cloudformation delete-stack --stack-name udacity-frontend-${OldWorkflowId:0:7}
            aws cloudformation delete-stack --stack-name udacity-backend-${OldWorkflowId:0:7}

      - destroy-environment
      - revert-migrations

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure-and-deploy-backend:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure-and-deploy-backend]
      - deploy-frontend:
          requires: [run-migrations]
      - smoke-test:
          requires: [configure-infrastructure-and-deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]